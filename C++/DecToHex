/*The rgb function is incomplete. Complete it so that passing in RGB decimal values will result in a hexadecimal representation being returned. 
Valid decimal values for RGB are 0 - 255. Any values that fall out of that range must be rounded to the closest valid value.

Note: Your answer should always be 6 characters long, the shorthand with 3 will not work here.

The following are examples of expected output values:

rgb(255, 255, 255) # returns FFFFFF
rgb(255, 255, 300) # returns FFFFFF
rgb(0,0,0) # returns 000000
rgb(148, 0, 211) # returns 9400D3
*/

#include <string>

std::string decToHex(int num){
  switch(num){
    case 10: return "A";
    case 11: return "B";
    case 12: return "C";
    case 13: return "D";
    case 14: return "E";
    case 15: return "F";
    default: return std::to_string(num);
  }
}

class RGBToHex
{ 
  public:   
    static std::string rgb(int r, int g, int b){
    std::string str;
      
    //If R, G, or B is less than 0, rounds it to 0. If they are bigger than 255, rounds down to 255
      r = (r < 0) ? 0 : r;
      r = (r > 255) ? 255 : r;

      g = (g < 0) ? 0 : g;
      g = (g > 255) ? 255 : g;

      b = (b < 0) ? 0 : b;
      b = (b > 255) ? 255 : b;
  
      int temp = r % 16;
      int temp2 = (r/16) % 16;
      
      str.append(decToHex(temp2));
      str.append(decToHex(temp));
      
      temp = g % 16;
      temp2 = (g/16) % 16;
      
      str.append(decToHex(temp2));
      str.append(decToHex(temp));
      
      temp = b % 16;
      temp2 = (b/16) % 16;
      
      str.append(decToHex(temp2));
      str.append(decToHex(temp));
      
    return str;      
  }  
     
};
